<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Template_Entity_Configuration.tt" #>
<#@ include file="Template_Entity_InputDto.tt" #>
<#@ include file="Template_Entity_OutputDto.tt" #>

<#@ assembly name="netstandard.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Net.Http.dll" #>
<#@ assembly name="$(TargetDir)Newtonsoft.Json.dll" #>
<#@ assembly name="$(TargetDir)OSharp.dll" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ Import Namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Net.Http" #>
<#@ import namespace="OSharp.CodeGenerator" #>
<#@ import namespace="OSharp.Extensions" #>
<#@ import namespace="OSharp.Json" #>
<#
    string currentPath = Path.GetDirectoryName(Host.TemplateFile);
    string configPath = currentPath + "\\cs_config";
    string inputDtoPath = currentPath + "\\cs_input";
    string outputDtoPath = currentPath + "\\cs_output";
    string projectName = "Liuliu.Demo";

    bool generateConfig = true;
    bool generateInputDto = true;
    bool generateOutputDto = true;

    HttpClient client = new HttpClient();
    string url = "http://localhost:7001/api/Common/GetTypeMetadatas?type=entity";
    string json = client.GetStringAsync(url).Result;
    TypeMetadata[] entities = json.FromJsonString<TypeMetadata[]>();
    string modulePattern=@"(?<=Demo\.)\w+(?=\.*Entities)";

    // EntityConfiguration
    if(generateConfig)
    {
        foreach(var entity in entities)
        {
            EntityConfigurationTemplate config = new EntityConfigurationTemplate(entity, modulePattern);
            config.ProjectName = projectName;
            string fileName = Path.Combine(configPath, config.FileName);
            config.Output.Encoding = Encoding.UTF8;
            config.RenderToFile(fileName);
        } 
    }

    //InputDto
    if(generateInputDto) 
    {
        foreach(var entity in entities)
        {
            InputDtoTemplate input = new InputDtoTemplate(entity, modulePattern);
            input.ProjectName = projectName;
            string fileName = Path.Combine(inputDtoPath, input.FileName);
            input.Output.Encoding = Encoding.UTF8;
            input.RenderToFile(fileName);
        }
    }

    //OutputDto
    if(generateOutputDto) 
    {
        foreach(var entity in entities)
        {
            OutputDtoTemplate output = new OutputDtoTemplate(entity, modulePattern);
            output.ProjectName = projectName;
            string fileName = Path.Combine(outputDtoPath, output.FileName);
            output.Output.Encoding = Encoding.UTF8;
            output.RenderToFile(fileName);
        }
    }
#>